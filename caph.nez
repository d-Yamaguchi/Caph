Source = { S*  $(Decl)  ( _ ('\r\n' / '\n') _ S+ $(Decl) )* #Source}
Decl = IoDecl
     / FuncDecl
     / VarDecl

//IoDecl's structure
IoDecl = In
       / Out
In = { 'cin' _ '>>' _ $target(Name) #In}
Out = { 'cout' _ '<<' _ $target(Value) #Out}

//FuncDecl's leftside tree
FuncDecl = { $name(Name) '(' _ $arglist(ArgList) _ ')' _ $returnlist(ReturnList) _ $where(WhereBlock)? _ #Funcdecl}
Name = { !KeyWord ([a-z] / [A-Z])+ ([0-9] / [a-z] / [A-Z] / '_')* #Name}
ArgList = {$arg(Name) _ (',' _ $arg(Name))* #Arglist}
ArgList2 = {$arg2(Value) _ (',' _ $arg2(Value))* #Arglist2}
ReturnList = { ($return(Return) ( ('\r\n' / '\n') $return(Return))* ('\r\n' / '\n'))? $othwiseret(OthwiseRet) #Returnlist}
Return = { _ $(Bind) _ '[' _ $retcase(ReturnCase) _ ']' _ #Return}
OthwiseRet = { _ $(Bind) ( _ '['_ 'otherwise' _ ']' )? #OthwiseRet}
ReturnCase = Exp {$left _ ',' _ $right(Exp) #Returncase}*
WhereBlock = { ('\r\n' / '\n') _ 'where' _ $declist(DecList) #Where}
DecList = (VarDecl / FuncDecl) {$left _ ('\r\n' / '\n') _ $right( VarDecl / FuncDecl ) #Declist}*

//needless
Type = ElemType
ElemType= {'Int' / 'Bool' #Elemtype}

//functioncall
FuncCall = { $name(Name) '(' _ $arglist(ArgList2) _ ')' #FuncCall}

Bind = ( {'=' _ $retval(Value) #Monoral_bind} / {'~=' _ $retval(Value) #Parallel_bind} )

//Value
Value = Exp

//VarDecl tree
VarDecl = { $name(Name) _ $(Bind) #Vardecl}

Exp = Exp0 {$left ( _ ('&&' #And / '||' #Or) _ $right(Exp0)) }*
Exp0 = Exp1 {$left ( _ ('==' #Equals / '!=' #NotEquals) _ $right(Exp1)) }*
Exp1 = Exp6 {$left ( _ ('<=' #LessThanEquals / '<' #LessThan / '>=' #GreaterThanEquals / '>' #GreaterThan) _ $right(Exp6)) }*
Exp6 = Exp7 {$left ( _ ('+' #Add / '-' #Sub) _ $right(Exp7)) }*
Exp7 = ExpS {$left ( _ ('*' #Mul) _ $right(ExpS)) }*
ExpS =  '(' _ Exp _ ')'
     / Nil
     / False
     / True
     / Numeral
     / FuncCall
     / Name
     / UnOp $(ExpS)
     / Lambda

UnOp = {'-' #Minus} / {'!' #Not}

Lambda = { '(' _ $(BindList) _ $(LambdaExp) _ ')' _ $(LambdaArgList) #Lambda}
BindList = { '\\' ( _ $lambda_bind(Name))+  #Bindlist}
LambdaExp = ( {'->' _ $lambda_value(Value) #Monoral_lambda} / {'~>' _ $lambda_value(Value) #Parallel_lambda} )
LambdaArgList = { ( _ $lambda_arg(Value) )+ #Lambda_arglist}

//tarminal element
Numeral = Integer
Integer = {([1-9] [0-9]* / '0') #Int}
Nil = {'nil' #Nil}
False = {'false' #False}
True = {'true' #True}

// KeyWords
KeyWord = 'otherwise'
        / 'Int'
        / 'Bool'
        / 'nil'
        / 'true'
        / 'false'
        / 'where'
        / 'cin'
        / 'cout'

S = [ \t\n\r]
_ = [ \t]*
